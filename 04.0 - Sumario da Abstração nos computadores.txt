                                  Abstração nos Computadores


Introdução sobre Abstração: O que é a abstração e a apresentação/ introdução sobre os níveis de abstração



Contexto histórico



Princípios por trás da Abstração nos Computadores:

 Objetivo: Nos dar uma visão ampla das bases conceituais que fazem a abstração funcionar tão bem, como se  
          estivéssemos montando os alicerces de um prédio que nos permite subir cada vez mais alto sem perder o 
          equilíbrio

 - Separação de Responsabilidades

 - Ocultação da Complexidade

 - Reutilização

 - Hierarquia de Camadas

 - Modularidade

 - Encapsulamento



Nível Físico (Físico-eletrônico / Circuitos Digitais):

 Objetivo: O nível físico descreve o que acontece nas entranhas de um computador, lá onde elétrons se movem, sinais 
          são interpretados como “1” e “0”, e tudo acontece em uma fração de segundo. É como entender a fundação de 
          uma casa: sem ela, nada funciona.

 - Eletrônica Digital básica (tensão, corrente, sinais)

 - Portas lógicas (AND, OR, NOT, XOR, etc.)

 - Álgebra Booleana

 - Circuitos combinacionais e sequenciais

 - Flip-Flops e registradores

 - Temporização, clock e sincronização

 - Construção de somadores, multiplexadores e comparadores

 - Contadores e decodificadores

 - Lógica de controle (FSM - máquinas de estados finitos)



Nível Lógico (Micronível / Lógica Digital Arquitetural):

 Objetivo: Representar como os circuitos físicos implementam funções computacionais, como cálculos, controle de   
          instruções e movimentação de dados.Aqui, os sinais elétricos começam a “fazer sentido” e organizar as 
          operações que tornam um computador funcional.

 - Unidade Lógica e Aritmética (ULA/ALU)

 - Unidade de Controle: sequenciamento de instruções

 - Caminho de dados (Data Path)

 - Arquitetura de registradores

 - Barramentos internos

 - Ciclo de busca-decodificação-execução

 - Ciclo de máquina e sinais de controle



Nível de Microprogramação (Micronível / Controle Microprogramado):

 Objetivo: Traduzir instruções da CPU em sinais de controle internos precisos, que coordenam o funcionamento de 
          registradores, barramentos e a ULA. Aqui, damos um zoom no que a Unidade de Controle realmente faz passo 
          a passo, usando microinstruções.

 - Conceito de microinstruções e microprogramas

 - Implementação de instruções em microcódigo

 - Unidade de Controle por Microprogramação x Cabeada

 - Ciclo de execução microprogramado

 - Exemplos de microprogramação em arquitetura real



Nível da Arquitetura da Máquina (ISA - Instruction Set Architecture):

 Objetivo: Este nível define o que o processador pode fazer — é a ponte entre o hardware físico e os programas que 
          rodam sobre ele. É o manual de instruções da CPU, mostrando ao programador o conjunto de comandos que ela 
          entende diretamente. Aqui, estamos no ponto onde a máquina começa a se tornar compreensível para humanos 
          que falam a linguagem da lógica binária.

 - Modelo de Von Neumann

 - Conjunto de instruções (RISC x CISC)

 - Modos de endereçamento

 - Tipos de instruções (aritméticas, lógicas, controle, memória)

 - Formatos de instrução

 - Pilha, registradores e memória

 - Montadores e linguagem de montagem (Assembly)

 - Chamadas de sistema (syscalls)



Nível do Sistema Operacional:

 Objetivo: Gerenciar os recursos físicos e virtuais do sistema, criando uma abstração funcional do hardware para  
          que os programas de mais alto nível (apps, navegadores, editores) possam operar sem se preocupar com os 
          detalhes físicos.

 - Abstração de hardware (memória, CPU, dispositivos de E/S)

 - Gerenciamento de processos e threads

 - Gerenciamento de memória (virtual, real, paginada, segmentada)

 - Gerenciamento de arquivos e sistemas de arquivos

 - Interface de chamadas de sistema

 - Multitarefa e escalonamento

 - Virtualização e proteção de recursos



Nível da Linguagem de Programação:

 Objetivo: O nível da linguagem de programação é onde os desenvolvedores realmente “colocam a mão na massa”. É o 
          ponto em que a lógica e as ideias ganham forma por meio de código escrito em linguagens como Python, C, 
          Java ou outras.

 - Linguagens de alto nível (C, Java, Python etc.)

 - Tradução de código: compilação, interpretação, JIT

 - Conceito de máquina virtual (JVM, CLR)

 - Tipos de dados e estruturas de controle

 - Chamadas de função e passagem de parâmetros

 - Alocação de memória em tempo de execução

 - Stack vs Heap



Nível do Usuário / Aplicação:

 Objetivo: É a ponte final entre o ser humano e toda a complexidade do sistema computacional, a camada onde ideias 
          viram ações e interações. Tudo o que você vê e interage (janelas, botões, menus, jogos, editores, 
          navegadores) está nesse último nível da pirâmide de abstração.

 - Aplicações de usuário (navegadores, editores de texto, jogos, etc.)

 - Interfaces gráficas e interfaces de linha de comando

 - Bibliotecas e APIs

 - Drivers de dispositivos

 - Comunicação com o sistema operacional



Relação entre os Níveis:

 Objetivo: Entender a relação entre os níveis de abstração dos computadores é essencial para compreender como 
          sistemas computacionais funcionam como um todo, desde o software até os circuitos físicos. Essa relação 
          mostra como cada camada se conecta, traduz e depende da anterior, garantindo modularidade, funcionalidade 
          e eficiência no funcionamento do computador.

 - Acoplamento vertical: como os níveis se apoiam nos anteriores

 - Isolamento e encapsulamento: cada nível oculta a complexidade do inferior

 - Tradução de conceitos: como comandos de uma linguagem viram sinais físicos

 - Abstração reversa (debugging e engenharia reversa): descida da aplicação até o nível lógico

 - Interface clara entre níveis: importância das interfaces formais (ex: APIs, ISAs)

 - Independência relativa entre níveis: evolução modular com manutenção de interfaces

 - Hierarquia de controle e fluxo de informação: comandos sobem e descem entre níveis

 - Diferença de granularidade entre níveis: bits, instruções, estruturas de dados

 - Abstração como ferramenta de modelagem: simplificação para uso e desenvolvimento

 - Impacto na performance e otimização: relação entre abstração e eficiência final



Tendências Futuras nos Níveis de Abstração:

 Objetivos: Antecipar como os níveis de abstração nos sistemas computacionais evoluirão para lidar com a crescente 
           complexidade, diversidade de hardware, demandas de segurança, inteligência artificial e novos paradigmas 
           computacionais: promovendo eficiência, adaptabilidade e segurança, sem sacrificar a acessibilidade para 
           desenvolvedores e usuários.

 - Abstrações dinâmicas, Distribuída e Multinuvem

 - Abstrações para Computação Quântica e Pós-Clássica

 - Níveis de Abstração Adaptativos (Autoajustáveis)

 - Desacoplamento entre Software e Hardware por Meio de IRs

 - Computação Heterogênea Transparente

 - Neuroabstrações: modelos inspirados no cérebro como suporte direto ao nível computacional

 - Camadas automáticas de otimização via IA.

 - Fusão de níveis: como ocorre em linguagens de baixo nível com runtime incorporado.

 - Segurança de Computação: isolamento de processos, enclaves, sandboxing

 - Computação Segura e Privada por Design (privacidade embutida nas abstrações)

 - Programação Orientada à Intenção e Abstrações Declarativas com IA

 

Importância da Abstração na Computação:



Conclusão sobre os Níveis de Abstração

